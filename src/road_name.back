#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <pthread.h> 

#include "road_name.h"

//static int ncount;    // 쓰레드간 공유되는 자원 
//static pthread_mutex_t  mutex = PTHREAD_MUTEX_INITIALIZER; // 쓰레드 초기화 
 
void getIniValue(char *section, char *key, char **output_buf_ptr)
{
	char ret_buf[1024] = {0x00, }; 
	char *value;
	
#ifdef WITH_CONV
	size_t in_size, out_size;
#endif	
	
	value = ret_buf;
	
	read_ini(section, key, NULL, &value);
	printf("in [%s][%s]=--> [%s] \n", section, key, value);
	
	
#ifdef WITH_CONV
	char tmpbuf[1024];	
	memset(tmpbuf, 0x00, sizeof(tmpbuf));
	
	in_size = strlen(value) +1;
	out_size = sizeof(tmpbuf);
	
	convStr( tmpbuf, &out_size, ret_buf, in_size, "EUC-KR", "UTF-8");
	memcpy(*output_buf_ptr, tmpbuf, strlen(tmpbuf) + 1);
	
#else
	memcpy(*output_buf_ptr, value, strlen(value)+1);
#endif

	printf("---> out[%s] \n", *output_buf_ptr);	
}


void unzipRoadData(char *downpath, char *path, char* outfilename)
{
	char buff[1024];
	char tmpbuf[1024];	
	char ret_buf[1024];	
	
	size_t in_size, out_size;
	
	memset(tmpbuf, 0x00, sizeof(tmpbuf));
	memset(ret_buf, 0x00, sizeof(ret_buf));
	
	create_dir(downpath);
	
	rename(outfilename, path);

	if (chdir(downpath) == 0) {
	    printf("Directory changed successfully.\n");
	}else{
	    printf("Could not change directory.\n");
	}
	
	in_size = strlen(outfilename) +1;
	out_size = sizeof(tmpbuf);
	
	convStr( tmpbuf, &out_size, outfilename, in_size, "UTF-8", "EUC-KR");
	
	getcwd( buff, 1024);                   // 작업 디렉토리 구하기
	printf( "=: Current Working dir[%s]\n", buff);
	
	printf( "=: Current file[%s][%s]\n", tmpbuf, outfilename);
	smpl_unzip(tmpbuf);
}

void parseScheme(char *filename)
{
	pre_load_scheme(filename);
}

int main(int argc, char **argv)
{

#ifndef TEST_DOWNLOAD
	char durl[FILENAME_MAX] = {0x00, }; 
	char filename[FILENAME_MAX] = {0x00, }; 
	char dpath[FILENAME_MAX] = {0x00, }; 
	char path[FILENAME_MAX] = {0x00, }; 
	char sfile[FILENAME_MAX] = {0x00, };
	
	char *downpath = dpath;
	char *downurl = durl;
#else
	/*char *url = "https://www.juso.go.kr/addrlink/addressBuildDev.do";*/
	char downurl[FILENAME_MAX] = "https://www.juso.go.kr/dn.do?reqType=ALLRDNM&fileName=201608전체주소(도로명코드)_전체분.zip&realFileName=201608ALLRDNM00.zip&regYmd=2016&ctprvnCd=00&gubun=RDNM&stdde=201608";
	char filename[FILENAME_MAX] = "201608전체주소(도로명코드)_전체분.zip";
	
#endif
	char *outfilename = filename;
	char *schmefile = sfile;
	
	load_ini(INI_FILE);
	
	//pthread_mutex_lock(&mutex); // 잠금을 생성한다.
	
#ifndef TEST_DOWNLOAD
	char *section1 = SECTION1;
	char *section3 = SECTION3;
	//outfilename = getIniValue(SECTION1, "OUT_FILE", 1);
	//getIniValue(SECTION1, "OUT_FILE", &outfilename);
	read_ini(section1, "OUT_FILE", NULL, &outfilename);
	printf("file =--> [%s][%d][%d] \n", outfilename, sizeof(outfilename), strlen(outfilename));
	
	//getIniValue(SECTION1, "DOWN_URL", &downurl); 
	read_ini(section1, "DOWN_URL", NULL, &downurl);
	printf("url =--> [%s][%d][%d] \n", downurl, sizeof(downurl), strlen(downurl));
	
	read_ini(SECTION1, "DOWN_PATH", NULL, &downpath);
	sprintf(path, "%s/%s", downpath, outfilename);
	
	read_ini(section3, "SCHEME", NULL, &schmefile);
	printf("SCHEME/%s \n", schmefile);
	
#else
	printf("file =--> [%s][%d][%d] \n", outfilename, sizeof(outfilename), strlen(outfilename));
	printf("url =--> [%s][%d][%d] \n", downurl, sizeof(downurl), strlen(downurl));
	
#endif 
	
	unload_ini();
	
	//pthread_mutex_unlock(&mutex); // 잠금을 해제한다. 
	
	if(!file_exists(path))
	{
		download_http(downurl, outfilename);
		unzipRoadData(downpath, path, outfilename);
	}
	
	parseScheme(schmefile);
	
	return 0;
}